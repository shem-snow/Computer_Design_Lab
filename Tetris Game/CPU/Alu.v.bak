module Alu #(parameter WIDTH = 16)(
	 input [WIDTH-1:0] a, b,
	 input [3:0] alucode,
	 output reg [WIDTH-1:0] result,
	 output reg [4:0] flags
);

	 
	 reg [WIDTH-1:0] memory [0:65535]; // Assuming 16-bit data and 64K (65536) memory locations	 
	 
	 always @(*)
		 case (alucode)
		 		4'b0000: result <= a + b; // Reg ADD
				4'b0001: result <= a - b; // Reg SUB
				4'b0010:						  // Reg CMP
					begin
						  if ($signed(a) < $signed(b))
								flags[4:0] = 5'b00011;
						  else if (a == b)
								flags[4:0] = 5'b10000;
						  else
								flags[4:0] = 5'b00000;
							result <= 16'b0000000000000000;
					end
				4'b0011: result <= a & b;			// Reg AND
				4'b0100: result <= a | b;			// Reg OR
				4'b0101: result <= a ^ b;			// Reg XOR
				//4'b0110: result <= (a <= b);	// Reg MOV -- this just becomes default as move
				4'b0110: result <= a << b;		   // Reg LSH
				4'b0111: result = b & 16'hFF00;   // LUI
				default: result <= a; 				// Checks(everything else that just returns a)
				
//				4'b1001: result <= a; // Load
//				4'b1010:							 // Store
//					begin
//						  // Store the value 'b' into memory at address 'a'
//				        a <= b;
//						  // Indicate a successful store operation
//						  result <= 16'b0000000000000000;
//					end
//				4'b1011:
//					begin									// BCond
//						if (a==1) // Replace 'condition' with your actual condition
//						  result <= result + b; //Branch taken
//						else
//						  result <= result + 1; // Branch not taken
//						end
//				4'b1100:						   // JCond
//						begin
//						if () //Replace 'condition' with your actual condition
//							result <= b; //Jump taken
//						else
//							result <= a; // Jump not taken
//						end
//				4'b1101:							// JAL
//					   begin
//						  // Save the address of the next instruction into the link register (R31)
//						  // Assuming that you have a dedicated link register (R31), you can do something like this:
//						  result <= a + 1; // Save the address of the next instruction				  
						//end
			endcase
endmodule